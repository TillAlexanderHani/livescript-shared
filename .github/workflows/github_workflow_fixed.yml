name: Podcast Pipeline - Bulletproof Zero Duplicates
on:
  schedule:
    # Run only 4 times per day to reduce chance of conflicts
    - cron: '0 6 * * *'   # 6 AM UTC 
    - cron: '0 12 * * *'  # 12 PM UTC 
    - cron: '0 18 * * *'  # 6 PM UTC 
    - cron: '0 0 * * *'   # 12 AM UTC 
  
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

# CRITICAL: Global concurrency control to prevent ANY parallel runs
concurrency:
  group: podcast-pipeline-singleton
  cancel-in-progress: false  # Queue instead of cancel

jobs:
  process-podcasts:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3 hours max
    
    steps:
    - name: üöÄ Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
        
    - name: ‚ö†Ô∏è Critical Safety Check - Prevent Parallel Runs
      run: |
        echo "üõ°Ô∏è CRITICAL SAFETY CHECK: Preventing parallel execution"
        
        # Check for very recent database modifications (within last 2 hours)
        if [ -f "emailed_episodes.json" ]; then
          LAST_MODIFIED=$(stat -c %Y emailed_episodes.json 2>/dev/null || echo 0)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))
          
          # If modified within 2 hours (7200 seconds), skip this run
          if [ $TIME_DIFF -lt 7200 ]; then
            echo "‚ö†Ô∏è DATABASE MODIFIED ${TIME_DIFF} SECONDS AGO ($(($TIME_DIFF / 60)) minutes)"
            echo "This indicates another pipeline may have run recently"
            echo "ABORTING THIS RUN TO PREVENT DUPLICATES"
            exit 0  # Exit cleanly to prevent workflow failure
          else
            echo "‚úÖ Database last modified ${TIME_DIFF} seconds ago - safe to proceed"
            echo "üìä That's $(($TIME_DIFF / 3600)) hours ago"
          fi
        else
          echo "üÜï No existing database - this appears to be the first run"
        fi
        
        # Additional check for lock files or temporary files
        if [ -f "pipeline.lock" ] || [ -f "*.tmp" ] 2>/dev/null; then
          echo "‚ö†Ô∏è Found existing lock or temporary files - another process may be running"
          echo "ABORTING TO PREVENT CONFLICTS"
          exit 0
        fi
        
        echo "‚úÖ ALL SAFETY CHECKS PASSED - PROCEEDING WITH PIPELINE"
        
    - name: üêç Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: üì¶ Install System Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y ffmpeg
        
    - name: üì¶ Install Python Dependencies  
      run: |
        python -m pip install --upgrade pip
        
        # Install specific stable versions
        pip install "numpy<2.0"
        pip install torch==1.13.1 torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
        pip install openai-whisper==20231117
        pip install feedparser==6.0.10 requests==2.31.0 python-dateutil==2.8.2
        
        echo "‚úÖ Dependencies installed successfully"
        
    - name: üìä Pre-run Database Analysis
      run: |
        echo "üìä PRE-RUN DATABASE ANALYSIS:"
        
        if [ -f "emailed_episodes.json" ]; then
          echo "  üìÅ Database exists: $(du -h emailed_episodes.json | cut -f1)"
          echo "  üìÖ Last modified: $(stat -c %y emailed_episodes.json)"
          
          # Count URLs safely
          URL_COUNT=$(python3 -c "
import json
try:
    with open('emailed_episodes.json', 'r') as f:
        data = json.load(f)
    episodes = data.get('episodes', {})
    urls = set()
    for ep in episodes.values():
        if isinstance(ep, dict) and 'url' in ep:
            urls.add(ep['url'])
    print(f'Total episode records: {len(episodes)}')
    print(f'Unique URLs tracked: {len(urls)}')
    print(f'Database version: {data.get(\"version\", \"unknown\")}')
except Exception as e:
    print(f'Error reading database: {e}')
" 2>/dev/null || echo "  ‚ùå Error reading database")
        else
          echo "  üÜï No existing database found"
        fi
        
    - name: ‚úÖ Environment Validation
      run: |
        echo "üîç VALIDATING ENVIRONMENT VARIABLES:"
        
        # Check required variables
        MISSING=""
        [ -z "$MISTRAL_API_KEY" ] && MISSING="$MISSING MISTRAL_API_KEY"
        [ -z "$EMAIL_FROM" ] && MISSING="$MISSING EMAIL_FROM"
        [ -z "$EMAIL_TO" ] && MISSING="$MISSING EMAIL_TO"
        [ -z "$EMAIL_PASSWORD" ] && MISSING="$MISSING EMAIL_PASSWORD"
        
        if [ -n "$MISSING" ]; then
          echo "‚ùå Missing required variables:$MISSING"
          exit 1
        fi
        
        echo "‚úÖ All environment variables validated"
      env:
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        
    - name: üöÄ Execute Pipeline with Maximum Safety
      env:
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
      run: |
        echo "üöÄ STARTING BULLETPROOF PODCAST PIPELINE"
        echo "üîí DUPLICATE PREVENTION: URL-based tracking"
        echo "üìã SAFETY SETTINGS:"
        echo "  ‚Ä¢ Max episode age: 5 days"
        echo "  ‚Ä¢ Max episodes per feed: 1"
        echo "  ‚Ä¢ Feed processing delay: 10 seconds"
        echo "  ‚Ä¢ Database: Atomic writes only"
        echo "  ‚Ä¢ Run ID: ${{ github.run_id }}"
        echo ""
        
        # Execute the pipeline with error handling
        if python podcast_shared_live_5.py; then
          echo ""
          echo "‚úÖ PIPELINE COMPLETED SUCCESSFULLY"
        else
          echo ""
          echo "‚ùå PIPELINE FAILED"
          exit 1
        fi
        
    - name: üìä Post-run Analysis
      run: |
        echo "üìä POST-RUN ANALYSIS:"
        
        if [ -f "emailed_episodes.json" ]; then
          echo "  üìÅ Database size: $(du -h emailed_episodes.json | cut -f1)"
          echo "  üìÖ Last modified: $(stat -c %y emailed_episodes.json)"
          
          # Analyze results safely
          python3 -c "
import json
try:
    with open('emailed_episodes.json', 'r') as f:
        data = json.load(f)
    episodes = data.get('episodes', {})
    urls = set()
    for ep in episodes.values():
        if isinstance(ep, dict) and 'url' in ep:
            urls.add(ep['url'])
    print(f'  üìä Total records: {len(episodes)}')
    print(f'  üîó Unique URLs: {len(urls)}')
    print(f'  üì¶ Version: {data.get(\"version\", \"unknown\")}')
    
    # Check for duplicates
    if len(episodes) > len(urls):
        print(f'  ‚ö†Ô∏è WARNING: {len(episodes) - len(urls)} potential duplicate records detected')
    else:
        print('  ‚úÖ No duplicate URLs detected')
        
except Exception as e:
    print(f'  ‚ùå Error analyzing database: {e}')
" 2>/dev/null
        else
          echo "  ‚ùå No database file found after execution"
        fi
        
        # Clean up any remaining temporary files
        rm -f pipeline.lock *.tmp downloads/* 2>/dev/null || true
        
    - name: üíæ Atomic Database Commit
      run: |
        # Configure git
        git config --local user.email "podcast-pipeline@actions.bot"
        git config --local user.name "Podcast Pipeline Bot"
        
        echo "üîÑ CHECKING FOR DATABASE CHANGES..."
        
        # Pull latest changes first to avoid conflicts
        git pull origin main --rebase --strategy-option=theirs || {
          echo "‚ö†Ô∏è Resolving rebase conflicts"
          git reset --hard origin/main
        }
        
        # Check if database changed
        if [ -f "emailed_episodes.json" ]; then
          if git diff --quiet emailed_episodes.json; then
            echo "üìÑ No database changes detected"
          else
            # Validate JSON before committing
            if python3 -c "import json; json.load(open('emailed_episodes.json'))" 2>/dev/null; then
              echo "üìÑ Valid database changes detected - preparing commit"
              git add emailed_episodes.json
              
              # Create descriptive commit message
              timestamp=$(date -u '+%Y-%m-%d %H:%M UTC')
              commit_msg="Update podcast database [$timestamp] [run:${{ github.run_number }}] [skip ci]"
              git commit -m "$commit_msg"
              
              # Push with retry logic
              max_attempts=3
              attempt=1
              
              while [ $attempt -le $max_attempts ]; do
                echo "üì§ Push attempt $attempt/$max_attempts"
                
                if git push origin main; then
                  echo "‚úÖ DATABASE SUCCESSFULLY COMMITTED AND PUSHED"
                  break
                elif [ $attempt -lt $max_attempts ]; then
                  echo "‚ö†Ô∏è Push failed, retrying in 10 seconds..."
                  sleep 10
                  
                  # Pull and rebase before retry
                  git pull origin main --rebase --strategy-option=theirs || {
                    git reset --hard origin/main
                    git add emailed_episodes.json
                    git commit -m "$commit_msg"
                  }
                else
                  echo "‚ùå FAILED TO PUSH AFTER $max_attempts ATTEMPTS"
                  exit 1
                fi
                
                attempt=$((attempt + 1))
              done
              
            else
              echo "‚ùå Invalid JSON in database - not committing"
              git checkout -- emailed_episodes.json
            fi
          fi
        else
          echo "üìÑ No database file to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìã Final Status Report
      if: always()
      run: |
        echo ""
        echo "üèÅ PIPELINE EXECUTION COMPLETE"
        echo "  üìÖ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "  üî¢ Run Number: ${{ github.run_number }}"
        echo "  üÜî Run ID: ${{ github.run_id }}"
        echo "  üéØ Trigger: ${{ github.event_name }}"
        echo ""
        echo "üõ°Ô∏è DUPLICATE PREVENTION STATUS: BULLETPROOF ‚úÖ"
        echo "üìä SAFETY MEASURES ACTIVE:"
        echo "  ‚Ä¢ URL-based duplicate detection ‚úÖ"
        echo "  ‚Ä¢ Atomic database operations ‚úÖ"
        echo "  ‚Ä¢ Concurrency control ‚úÖ"
        echo "  ‚Ä¢ Recent run detection ‚úÖ"
        echo "  ‚Ä¢ Single episode per feed ‚úÖ"
        echo ""
        echo "üéØ ZERO DUPLICATE GUARANTEE ACTIVE"
